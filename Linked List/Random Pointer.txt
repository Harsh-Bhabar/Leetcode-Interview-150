/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* duplicate(Node* head){
        if(!head){
            return head;
        }

        Node* curr = head;

        // made duplicate nodes in the middle 
        while(curr){
            Node* newNode = new Node(curr->val);
            Node* nextNode = curr->next;
            curr->next = newNode; 
            newNode->next = nextNode;
            curr = nextNode;
        }
        curr = head;

        // set random pointer to of newly created duplicate nodes 

        while(curr){
            curr->next->random = (curr->random) ? curr->random->next : NULL;
            curr = curr->next->next;
        }

        // breaking newly created middle node connections 

        Node* og = head;
        Node* copy = head->next;
        Node* temp = copy;

        while(og && copy){
            og->next = og->next ? og->next->next : og->next;
            copy->next = copy->next ? copy->next->next : copy->next;
            og = og->next;
            copy = copy->next;
        }

        return temp;
    }

    Node* copyRandomList(Node* head) {
        return duplicate(head);
    }
};